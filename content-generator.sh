#!/bin/bash

# ü§ñ AI-Kit Content Collections Auto-Generator
# Continuously generates fresh content for demonstration

SCRIPT_DIR="/home/bigale/repos/icpxmldb/ai-kit/industrial-iot"
LOG_FILE="$SCRIPT_DIR/content-generator.log"

echo "ü§ñ AI-Kit Content Collections Auto-Generator" | tee -a "$LOG_FILE"
echo "============================================" | tee -a "$LOG_FILE"
echo "‚è∞ Started at $(date)" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# Function to run log harvester
run_harvester() {
    echo "üöú Running log harvester at $(date)..." | tee -a "$LOG_FILE"
    cd "$SCRIPT_DIR"
    ./log-harvester.sh >> "$LOG_FILE" 2>&1
    echo "‚úÖ Harvester completed" | tee -a "$LOG_FILE"
    echo "" | tee -a "$LOG_FILE"
}

# Function to generate additional sample content
generate_sample_content() {
    echo "üé® Generating sample content at $(date)..." | tee -a "$LOG_FILE"
    
    CONTENT_DIR="$SCRIPT_DIR/astro-host/src/content"
    TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
    
    # Create a sample flow documentation
    FLOW_FILE="$CONTENT_DIR/node-red-flows/sample-flow-${TIMESTAMP}.md"
    
    CHARACTERS=("kyoko" "byakuya" "chihiro" "celestia" "sakura")
    CHAR="${CHARACTERS[$((RANDOM % ${#CHARACTERS[@]}))]}"
    
    cat > "$FLOW_FILE" << EOF
---
title: "Auto-Generated Flow - ${CHAR} $(date +%H:%M)"
character: $CHAR
description: "Automatically generated sample flow for demonstration purposes"
version: "1.0.$(date +%s)"
tags: ["sample", "auto-generated", "demo", "$(date +%A)"]
difficulty: intermediate
lastUpdated: "$(date -Iseconds)"
author: "AI-Kit Auto-Generator"
flowId: "auto-${CHAR}-$(date +%s)"
nodes:
  - id: "input-$(date +%s)"
    type: "inject"
    name: "Sample Input"
    description: "Auto-generated input node"
  - id: "process-$(date +%s)"
    type: "function"
    name: "Processing Logic"
    description: "Sample processing function"
  - id: "output-$(date +%s)"
    type: "debug"
    name: "Sample Output"
    description: "Debug output node"
configuration:
  interval: 5000
  autoStart: true
  generatedAt: "$(date -Iseconds)"
---

# Auto-Generated Sample Flow

This flow was automatically generated at **$(date)** for demonstration purposes.

## Purpose

This sample demonstrates how content collections can be automatically populated with real-time data from the Node-RED simulators.

## Features

- **Auto-Generation**: Created by the content generator script
- **Real-Time**: Generated at $(date)
- **Character Context**: Associated with **${CHAR}** simulator
- **Dynamic**: Changes each time the generator runs

## Generated Configuration

\`\`\`javascript
const config = {
    character: "${CHAR}",
    timestamp: "$(date -Iseconds)",
    random: $(shuf -i 1000-9999 -n 1)
};
\`\`\`

---
*Auto-generated by AI-Kit Content Generator*
EOF

    echo "‚úÖ Generated sample flow: $FLOW_FILE" | tee -a "$LOG_FILE"
}

# Check if simulators are running
check_simulators() {
    echo "üîç Checking simulator status..." | tee -a "$LOG_FILE"
    cd "$SCRIPT_DIR/node-red-plc-simulator"
    STATUS=$(./scripts/status.sh 2>/dev/null | grep "Summary:" | head -1)
    echo "$STATUS" | tee -a "$LOG_FILE"
    
    if echo "$STATUS" | grep -q "5/5 simulators running"; then
        echo "‚úÖ All simulators are running" | tee -a "$LOG_FILE"
        return 0
    else
        echo "‚ö†Ô∏è Not all simulators are running" | tee -a "$LOG_FILE"
        return 1
    fi
}

# Main execution
if check_simulators; then
    run_harvester
    generate_sample_content
    
    echo "üéâ Content generation complete!" | tee -a "$LOG_FILE"
    echo "üìä View results at: http://localhost:3000/content-showcase" | tee -a "$LOG_FILE"
else
    echo "‚ùå Skipping content generation - simulators not fully running" | tee -a "$LOG_FILE"
fi

echo "‚è∞ Finished at $(date)" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"
