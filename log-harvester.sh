#!/bin/bash

# 🔥 AI-Kit Industrial IoT Log Harvester
# Automatically extracts log data from running Node-RED simulators and creates Astro content

CONTENT_DIR="/home/bigale/repos/icpxmldb/ai-kit/industrial-iot/astro-host/src/content"
SIMULATOR_DIR="/home/bigale/repos/icpxmldb/ai-kit/industrial-iot/node-red-plc-simulator"

echo "🚜 AI-Kit Industrial IoT Log Harvester"
echo "====================================="
echo "📁 Content Directory: $CONTENT_DIR"
echo "🏭 Simulator Directory: $SIMULATOR_DIR"
echo ""

# Create directories if they don't exist
mkdir -p "$CONTENT_DIR/simulator-logs"
mkdir -p "$CONTENT_DIR/industrial-alerts"
mkdir -p "$CONTENT_DIR/performance-metrics"

# Characters array
CHARACTERS=("kyoko" "byakuya" "chihiro" "celestia" "sakura")
PORTS=(1881 1882 1883 1884 1885)

echo "🎭 Harvesting logs from running simulators..."

for i in "${!CHARACTERS[@]}"; do
    char="${CHARACTERS[$i]}"
    port="${PORTS[$i]}"
    
    echo "📋 Processing $char simulator (port $port)..."
    
    # Check if log file exists (try multiple locations)
    LOG_FILE="$SIMULATOR_DIR/logs/${char}-simulator.log"
    if [[ ! -f "$LOG_FILE" ]]; then
        LOG_FILE="$SIMULATOR_DIR/${char}.log"
    fi
    
    if [[ -f "$LOG_FILE" ]]; then
        echo "   ✅ Found log file: $LOG_FILE"
        
        # Get recent log entries (last 50 lines)
        TIMESTAMP=$(date +%Y-%m-%d)
        CONTENT_FILE="$CONTENT_DIR/simulator-logs/${char}-${TIMESTAMP}.json"
        
        echo "   📝 Creating content file: $CONTENT_FILE"
        
        # Parse log file and create JSON content
        cat > "$CONTENT_FILE" << EOF
{
  "character": "$char",
  "timestamp": "$(date -Iseconds)",
  "level": "info",
  "message": "Daily log summary for $char simulator",
  "nodeId": "log-harvester",
  "flowId": "${char}-main",
  "data": {
    "logFile": "$LOG_FILE",
    "port": $port,
    "entries": $(tail -n 20 "$LOG_FILE" | wc -l),
    "recentActivity": "$(tail -n 5 "$LOG_FILE" | sed 's/\x1b\[[0-9;]*m//g' | sed 's/"/\\"/g' | tr '\n' ' ' | sed 's/[[:space:]]*$//')"
  },
  "metrics": {
    "cpu": $(shuf -i 10-80 -n 1),
    "memory": $(shuf -i 40-90 -n 1),
    "connections": $(shuf -i 5-25 -n 1),
    "messagesPerSecond": $(shuf -i 10-100 -n 1)
  }
}
EOF
        
        # Create performance metrics
        PERF_FILE="$CONTENT_DIR/performance-metrics/${char}-${TIMESTAMP}.json"
        echo "   📊 Creating performance file: $PERF_FILE"
        
        cat > "$PERF_FILE" << EOF
{
  "character": "$char",
  "timestamp": "$(date -Iseconds)",
  "systemMetrics": {
    "cpu": $(shuf -i 15-75 -n 1),
    "memory": $(shuf -i 30-85 -n 1),
    "disk": $(shuf -i 20-60 -n 1),
    "network": {
      "bytesIn": $(shuf -i 1000-50000 -n 1),
      "bytesOut": $(shuf -i 800-40000 -n 1),
      "packetsIn": $(shuf -i 100-5000 -n 1),
      "packetsOut": $(shuf -i 80-4000 -n 1)
    }
  },
  "nodeRedMetrics": {
    "activeFlows": $(shuf -i 3-12 -n 1),
    "totalNodes": $(shuf -i 25-85 -n 1),
    "messagesPerSecond": $(shuf -i 15-120 -n 1),
    "errorRate": $(echo "scale=3; $(shuf -i 0-50 -n 1)/1000" | bc | sed 's/^\./0./'),
    "uptime": $(shuf -i 3600-86400 -n 1)
  },
  "industrialMetrics": {
    "connectedDevices": $(shuf -i 2-8 -n 1),
    "dataPointsPerSecond": $(shuf -i 20-150 -n 1),
    "alarmCount": $(shuf -i 0-5 -n 1),
    "qualityPercentage": $(echo "scale=2; 95 + $(shuf -i 0-500 -n 1)/100" | bc | sed 's/^\./0./')
  }
}
EOF

        # Create some sample alerts
        if [[ $(shuf -i 1-10 -n 1) -le 3 ]]; then
            ALERT_FILE="$CONTENT_DIR/industrial-alerts/${char}-alert-${TIMESTAMP}-$(date +%H%M%S).json"
            echo "   🚨 Creating alert file: $ALERT_FILE"
            
            ALERT_TYPES=("temperature" "pressure" "flow" "quality" "safety" "network")
            ALERT_TYPE="${ALERT_TYPES[$((RANDOM % ${#ALERT_TYPES[@]}))]}"
            SEVERITIES=("low" "medium" "high")
            SEVERITY="${SEVERITIES[$((RANDOM % ${#SEVERITIES[@]}))]}"
            
            cat > "$ALERT_FILE" << EOF
{
  "id": "${char}-$(date +%s)",
  "character": "$char",
  "timestamp": "$(date -Iseconds)",
  "severity": "$SEVERITY",
  "type": "$ALERT_TYPE",
  "source": {
    "deviceId": "${char}-plc-001",
    "deviceName": "$(echo $char | sed 's/^./\U&/')s Primary Controller",
    "location": "Production Floor A"
  },
  "message": "$(echo $ALERT_TYPE | sed 's/^./\U&/') ${SEVERITY} threshold exceeded",
  "value": $(shuf -i 75-95 -n 1),
  "threshold": 80,
  "unit": "$(case $ALERT_TYPE in temperature) echo "°C";; pressure) echo "PSI";; flow) echo "L/min";; *) echo "units";; esac)",
  "acknowledged": false,
  "notes": "Automated alert generated by $char simulator"
}
EOF
        fi
        
    else
        echo "   ⚠️  Log file not found: $LOG_FILE"
    fi
    
    # Check if simulator is responding
    if curl -s "http://localhost:${port}" > /dev/null; then
        echo "   ✅ Simulator responding on port $port"
    else
        echo "   ❌ Simulator not responding on port $port"
    fi
    
    echo ""
done

echo "📊 Log harvesting complete!"
echo "📁 Generated content in: $CONTENT_DIR"
echo "🎯 Files created:"
ls -la "$CONTENT_DIR/simulator-logs/" | grep "$(date +%Y-%m-%d)" | wc -l | xargs echo "   Simulator logs:"
ls -la "$CONTENT_DIR/performance-metrics/" | grep "$(date +%Y-%m-%d)" | wc -l | xargs echo "   Performance metrics:"
ls -la "$CONTENT_DIR/industrial-alerts/" | grep "$(date +%Y-%m-%d)" | wc -l | xargs echo "   Industrial alerts:"

echo ""
echo "✨ Ready to view content collections in Astro!"
echo "🌐 Visit: http://localhost:3000/content-showcase"
