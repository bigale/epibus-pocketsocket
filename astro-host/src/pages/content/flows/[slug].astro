---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const flows = await getCollection('node-red-flows');
  return flows.map((flow) => {
    return {
      params: { slug: flow.slug },
      props: { flow },
    };
  });
}

const { flow } = Astro.props;
const { Content } = await flow.render();

// Character colors for UI
const characterColors = {
  kyoko: 'from-purple-600 to-purple-800',
  byakuya: 'from-yellow-600 to-yellow-800',
  chihiro: 'from-green-600 to-green-800',
  celestia: 'from-blue-600 to-blue-800',
  sakura: 'from-pink-600 to-pink-800'
};

const getDifficultyColor = (difficulty: string) => {
  switch (difficulty) {
    case 'beginner': return 'bg-green-600';
    case 'intermediate': return 'bg-yellow-600';
    case 'advanced': return 'bg-red-600';
    default: return 'bg-gray-600';
  }
};
---

<Layout title={`${flow.data.title} - Node-RED Flow Documentation`}>
  <div class="min-h-screen bg-gray-900 text-white">
    <header class="bg-gray-800 border-b border-gray-700 px-6 py-4">
      <div class="max-w-4xl mx-auto">
        <nav class="text-sm text-gray-400 mb-2">
          <a href="/content" class="hover:text-white">Content Collections</a> 
          <span class="mx-2">/</span>
          <a href="/content" class="hover:text-white">Node-RED Flows</a>
          <span class="mx-2">/</span>
          <span class="text-white">{flow.data.title}</span>
        </nav>
        
        <div class="flex items-start justify-between">
          <div>
            <h1 class="text-3xl font-bold text-white mb-2">{flow.data.title}</h1>
            <p class="text-gray-300 text-lg">{flow.data.description}</p>
          </div>
          
          <div class="flex flex-col gap-2 items-end">
            <span class={`px-3 py-1 rounded text-white bg-gradient-to-r ${characterColors[flow.data.character]}`}>
              {flow.data.character.charAt(0).toUpperCase() + flow.data.character.slice(1)}
            </span>
            <span class={`px-2 py-1 rounded text-xs text-white ${getDifficultyColor(flow.data.difficulty)}`}>
              {flow.data.difficulty}
            </span>
          </div>
        </div>
      </div>
    </header>

    <main class="max-w-4xl mx-auto px-6 py-8">
      <!-- Flow Metadata -->
      <div class="bg-gray-800 rounded-lg p-6 mb-8 border border-gray-700">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <h3 class="text-sm font-medium text-gray-400 mb-2">Flow Information</h3>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-300">Version:</span>
                <span class="text-white font-mono">{flow.data.version}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-300">Flow ID:</span>
                <span class="text-white font-mono">{flow.data.flowId}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-300">Author:</span>
                <span class="text-white">{flow.data.author}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-300">Last Updated:</span>
                <span class="text-white">{new Date(flow.data.lastUpdated).toLocaleDateString()}</span>
              </div>
            </div>
          </div>
          
          <div>
            <h3 class="text-sm font-medium text-gray-400 mb-2">Tags</h3>
            <div class="flex flex-wrap gap-1">
              {flow.data.tags.map((tag: string) => (
                <span class="px-2 py-1 bg-gray-700 text-gray-300 text-xs rounded">{tag}</span>
              ))}
            </div>
          </div>
          
          <div>
            <h3 class="text-sm font-medium text-gray-400 mb-2">Node Count</h3>
            <div class="text-2xl font-bold text-white">{flow.data.nodes.length}</div>
            <div class="text-sm text-gray-400">nodes in flow</div>
          </div>
        </div>
      </div>

      <!-- Flow Nodes -->
      <div class="bg-gray-800 rounded-lg p-6 mb-8 border border-gray-700">
        <h3 class="text-lg font-semibold text-white mb-4">Flow Nodes</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          {flow.data.nodes.map((node: any) => (
            <div class="bg-gray-700 rounded p-3 border border-gray-600">
              <div class="flex items-center justify-between mb-2">
                <h4 class="text-white font-medium">{node.name || node.id}</h4>
                <span class="text-xs bg-gray-600 text-gray-300 px-2 py-1 rounded">{node.type}</span>
              </div>
              {node.description && (
                <p class="text-gray-300 text-sm">{node.description}</p>
              )}
            </div>
          ))}
        </div>
      </div>

      <!-- Input/Output Ports -->
      {(flow.data.inputPorts || flow.data.outputPorts) && (
        <div class="bg-gray-800 rounded-lg p-6 mb-8 border border-gray-700">
          <h3 class="text-lg font-semibold text-white mb-4">Interface Specification</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {flow.data.inputPorts && (
              <div>
                <h4 class="text-sm font-medium text-gray-400 mb-3">Input Ports</h4>
                <div class="space-y-2">
                  {flow.data.inputPorts.map((port: any) => (
                    <div class="bg-gray-700 rounded p-3">
                      <div class="flex items-center justify-between mb-1">
                        <span class="text-white font-medium">{port.name}</span>
                        <span class="text-xs bg-blue-600 text-white px-2 py-1 rounded">{port.type}</span>
                      </div>
                      <p class="text-gray-300 text-sm">{port.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {flow.data.outputPorts && (
              <div>
                <h4 class="text-sm font-medium text-gray-400 mb-3">Output Ports</h4>
                <div class="space-y-2">
                  {flow.data.outputPorts.map((port: any) => (
                    <div class="bg-gray-700 rounded p-3">
                      <div class="flex items-center justify-between mb-1">
                        <span class="text-white font-medium">{port.name}</span>
                        <span class="text-xs bg-green-600 text-white px-2 py-1 rounded">{port.type}</span>
                      </div>
                      <p class="text-gray-300 text-sm">{port.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      <!-- Configuration -->
      {flow.data.configuration && (
        <div class="bg-gray-800 rounded-lg p-6 mb-8 border border-gray-700">
          <h3 class="text-lg font-semibold text-white mb-4">Configuration</h3>
          <div class="bg-gray-900 rounded p-4 font-mono text-sm">
            <pre class="text-gray-300 whitespace-pre-wrap overflow-x-auto">{JSON.stringify(flow.data.configuration, null, 2)}</pre>
          </div>
        </div>
      )}

      <!-- Documentation Content -->
      <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <div class="prose prose-invert prose-lg max-w-none">
          <Content />
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="mt-8 flex gap-4">
        <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">
          Import Flow
        </button>
        <button class="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded">
          Export Documentation
        </button>
        <a href="/content" class="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded inline-block">
          ‚Üê Back to Collections
        </a>
      </div>
    </main>
  </div>
</Layout>

<style>
  /* Enhanced prose styling for technical documentation */
  .prose {
    color: #e5e7eb;
  }
  
  .prose h1, .prose h2, .prose h3, .prose h4 {
    color: #ffffff;
  }
  
  .prose code {
    background-color: #374151;
    color: #fbbf24;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  .prose pre {
    background-color: #1f2937;
    border: 1px solid #374151;
  }
  
  .prose pre code {
    background-color: transparent;
    color: #e5e7eb;
    padding: 0;
  }
  
  .prose blockquote {
    border-left: 4px solid #6366f1;
    background-color: #1f2937;
    padding: 1rem;
    margin: 1rem 0;
  }
  
  .prose table {
    background-color: #374151;
  }
  
  .prose th {
    background-color: #4b5563;
    color: #ffffff;
  }
  
  .prose td {
    border-color: #4b5563;
  }
  
  .prose a {
    color: #60a5fa;
  }
  
  .prose a:hover {
    color: #93c5fd;
  }
</style>
