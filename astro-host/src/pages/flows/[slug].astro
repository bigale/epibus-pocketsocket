---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const flows = await getCollection('node-red-flows');
  return flows.map((flow) => ({
    params: { slug: flow.slug },
    props: { flow },
  }));
}

const { flow } = Astro.props;
const { Content } = await flow.render();

const characterColors = {
  kyoko: 'purple',
  byakuya: 'yellow',
  chihiro: 'green',
  celestia: 'red',
  sakura: 'pink'
};

const characterColor = characterColors[flow.data.character] || 'blue';
---

<Layout title={`${flow.data.title} - Node-RED Flow Documentation`}>
  <div class="min-h-screen bg-gray-900 text-white">
    <!-- Header -->
    <header class="bg-gray-800 border-b border-gray-700 p-6">
      <div class="max-w-4xl mx-auto">
        <div class="flex items-center gap-4 mb-4">
          <a href="/content-showcase" class="text-blue-400 hover:text-blue-300 transition-colors">
            ‚Üê Back to Collections
          </a>
        </div>
        
        <div class="flex items-center gap-4 mb-4">
          <span class={`w-6 h-6 rounded-full bg-${characterColor}-500`}></span>
          <h1 class="text-3xl font-bold text-white">{flow.data.title}</h1>
          <span class="bg-gray-700 text-gray-300 px-3 py-1 rounded text-sm">v{flow.data.version}</span>
        </div>
        
        <p class="text-gray-300 text-lg mb-4">{flow.data.description}</p>
        
        <div class="flex gap-4 text-sm">
          <span class="bg-blue-600 px-3 py-1 rounded">Character: {flow.data.character}</span>
          <span class={`px-3 py-1 rounded ${
            flow.data.difficulty === 'beginner' ? 'bg-green-600' :
            flow.data.difficulty === 'intermediate' ? 'bg-yellow-600' :
            'bg-red-600'
          }`}>Difficulty: {flow.data.difficulty}</span>
          <span class="bg-purple-600 px-3 py-1 rounded">By: {flow.data.author}</span>
        </div>
      </div>
    </header>

    <div class="max-w-4xl mx-auto p-6">
      <!-- Flow Metadata -->
      <div class="bg-gray-800 rounded-lg p-6 mb-8 border border-gray-700">
        <h2 class="text-xl font-semibold mb-4">üìä Flow Information</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <div class="bg-gray-700 rounded p-4">
            <h3 class="text-sm font-medium text-gray-400 mb-1">Flow ID</h3>
            <p class="text-white font-mono text-sm">{flow.data.flowId}</p>
          </div>
          
          <div class="bg-gray-700 rounded p-4">
            <h3 class="text-sm font-medium text-gray-400 mb-1">Last Updated</h3>
            <p class="text-white">{new Date(flow.data.lastUpdated).toLocaleDateString()}</p>
          </div>
          
          <div class="bg-gray-700 rounded p-4">
            <h3 class="text-sm font-medium text-gray-400 mb-1">Total Nodes</h3>
            <p class="text-white text-lg font-bold">{flow.data.nodes.length}</p>
          </div>
          
          <div class="bg-gray-700 rounded p-4">
            <h3 class="text-sm font-medium text-gray-400 mb-1">Complexity</h3>
            <p class="text-white">{flow.data.difficulty}</p>
          </div>
        </div>
        
        <!-- Tags -->
        <div class="mb-4">
          <h3 class="text-sm font-medium text-gray-400 mb-2">Tags</h3>
          <div class="flex flex-wrap gap-2">
            {flow.data.tags.map((tag) => (
              <span class="bg-blue-600 text-white px-3 py-1 rounded-full text-sm">{tag}</span>
            ))}
          </div>
        </div>
        
        <!-- Configuration -->
        {flow.data.configuration && (
          <div>
            <h3 class="text-sm font-medium text-gray-400 mb-2">Configuration</h3>
            <div class="bg-gray-900 rounded p-4 font-mono text-sm">
              <pre class="text-gray-300">{JSON.stringify(flow.data.configuration, null, 2)}</pre>
            </div>
          </div>
        )}
      </div>

      <!-- Node Documentation -->
      <div class="bg-gray-800 rounded-lg p-6 mb-8 border border-gray-700">
        <h2 class="text-xl font-semibold mb-4">üîß Node Documentation</h2>
        
        <div class="space-y-4">
          {flow.data.nodes.map((node) => (
            <div class="bg-gray-700 rounded p-4">
              <div class="flex items-center gap-3 mb-2">
                <span class="bg-blue-600 text-white px-2 py-1 rounded text-xs font-mono">{node.type}</span>
                <h3 class="font-semibold text-white">{node.name || node.id}</h3>
              </div>
              {node.description && (
                <p class="text-gray-300 text-sm">{node.description}</p>
              )}
              <div class="mt-2 text-xs text-gray-400">
                ID: <span class="font-mono">{node.id}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Input/Output Ports -->
      {(flow.data.inputPorts || flow.data.outputPorts) && (
        <div class="bg-gray-800 rounded-lg p-6 mb-8 border border-gray-700">
          <h2 class="text-xl font-semibold mb-4">üîå Input/Output Ports</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {flow.data.inputPorts && (
              <div>
                <h3 class="text-lg font-medium text-green-400 mb-3">üì• Input Ports</h3>
                <div class="space-y-3">
                  {flow.data.inputPorts.map((port) => (
                    <div class="bg-gray-700 rounded p-3">
                      <div class="flex items-center gap-2 mb-1">
                        <span class="bg-green-600 text-white px-2 py-1 rounded text-xs">{port.type}</span>
                        <span class="font-semibold text-white">{port.name}</span>
                      </div>
                      <p class="text-gray-300 text-sm">{port.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {flow.data.outputPorts && (
              <div>
                <h3 class="text-lg font-medium text-blue-400 mb-3">üì§ Output Ports</h3>
                <div class="space-y-3">
                  {flow.data.outputPorts.map((port) => (
                    <div class="bg-gray-700 rounded p-3">
                      <div class="flex items-center gap-2 mb-1">
                        <span class="bg-blue-600 text-white px-2 py-1 rounded text-xs">{port.type}</span>
                        <span class="font-semibold text-white">{port.name}</span>
                      </div>
                      <p class="text-gray-300 text-sm">{port.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      <!-- Documentation Content -->
      <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h2 class="text-xl font-semibold mb-4">üìñ Documentation</h2>
        
        <div class="prose prose-invert prose-blue max-w-none">
          <Content />
        </div>
      </div>

      <!-- Character Dashboard Link -->
      <div class="mt-8 bg-gradient-to-r from-gray-800 to-gray-700 rounded-lg p-6 border border-gray-600">
        <h3 class="text-lg font-semibold mb-2">üé≠ View Live Implementation</h3>
        <p class="text-gray-300 mb-4">See this flow in action on {flow.data.character}'s dashboard:</p>
        
        <div class="flex gap-4">
          <a 
            href={`http://localhost:${
              flow.data.character === 'kyoko' ? '1881' :
              flow.data.character === 'byakuya' ? '1882' :
              flow.data.character === 'chihiro' ? '1883' :
              flow.data.character === 'celestia' ? '1884' :
              '1885'
            }/api/ui`}
            target="_blank"
            class={`bg-${characterColor}-600 hover:bg-${characterColor}-700 text-white px-6 py-3 rounded-lg transition-colors inline-flex items-center gap-2`}
          >
            üîó Open {flow.data.character} Dashboard
          </a>
          
          <a 
            href={`http://localhost:${
              flow.data.character === 'kyoko' ? '1881' :
              flow.data.character === 'byakuya' ? '1882' :
              flow.data.character === 'chihiro' ? '1883' :
              flow.data.character === 'celestia' ? '1884' :
              '1885'
            }/red`}
            target="_blank"
            class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg transition-colors inline-flex items-center gap-2"
          >
            ‚öôÔ∏è Open Node-RED Editor
          </a>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .prose {
    color: #e5e7eb;
  }
  
  .prose h1, .prose h2, .prose h3, .prose h4 {
    color: #ffffff;
  }
  
  .prose code {
    background-color: #374151;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    color: #fbbf24;
  }
  
  .prose pre {
    background-color: #1f2937;
    border: 1px solid #374151;
  }
  
  .prose blockquote {
    border-left: 4px solid #3b82f6;
    background-color: #1f2937;
    padding: 1rem;
    margin: 1rem 0;
  }
</style></Layout>
